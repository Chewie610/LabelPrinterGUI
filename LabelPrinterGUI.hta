<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
	<meta http-equiv="content-language" content="zh" />
    <meta http-equiv="x-ua-compatible" content="IE=11"/>
    <title>Love Bao Stickers</title>
    <hta:application id="ButtonApp" applicationname="Love Bao Stickers" singleinstance="yes">
    <style>
        .rectangular-button {
            width: 200px;
            min-height: 130px;
            border-radius: 10px;
            background-color: #3498db;
            color: white;
            font-size: 20px;
            font-weight: bold;
            border: none;
            margin: 10px;
            padding-top: 40px;
            padding-left: 10px;
            padding-right: 10px;
            box-sizing: border-box;
            text-align: center;
            cursor: pointer;
            overflow: hidden;
            word-wrap: break-word;
            float: left;
        }
		.print-button {
			background-color: DarkRed; 
			position: fixed; 
			bottom: 30px; 
			left: 50%; 
			transform: translateX(-50%); 
			width: 220px; 
			min-height: 50px; 
			border-radius: 5px; 
			font-size: 20px; 
			font-weight: bold;
			text-align: center;
			padding: 10px;
			color: white;
		}
        .notification {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 10px;
            z-index: 1000;
            text-align: center;
            width: auto;
            min-width: 100px;
            box-sizing: border-box;
        }
		.item-header {
			font-size: 30px; /* Adjust the font size as needed */
			font-weight: bold; /* Make the text bold */
			text-align: center; /* Center align the text */
			margin-top: 20px; /* Add space above the header */
			margin-bottom: 0px; /* Add space below the header */
			color: #3498db; /* Change the text color */
		}

        .logo-container {
			display: flex;
			justify-content: center;
			align-items: center;
			height: auto; /* Set a fixed height for the container */
			margin-top: 10px; /* Space from the top of the page */
			margin-bottom: 20px;
		}

		.padded {
			max-width: 400px; /* Ensures the logo will not overflow its container */

		}

		@media (max-width: 768px) {
			.logo-container {
				height: 60px; /* Smaller height for smaller screens */
			}
		}

		@media (min-width: 769px) {
			.logo-container {
				height: 100px; /* Larger fixed height for larger screens */
			}
		}

		h2 {
			text-align: center;
			margin-top: 20px; /* Add more space above the header */
			padding: 10px 0; /* Adds padding around the text */
		}
    </style>
</head>
<body>

<!-- Logo images wrapped in containers -->
<div class="logo-container">
    <img class="padded" src="logo.jpg" alt="Love Bao Logo">
</div>


<script type="text/javascript">
    var notification = null;
    var pig_graphic = "^FO310,150^GFA,1118,1118,13,,X01C,X07C,X0FC,W01FC,W0FCC,V01F0C,V07C0C,V0F00C,U01C00C,U03800E,U07I0E,U0EI0E,U0CI06,U08I06,T018I07,::S03F8I07,R03FF8I07,R0F8K06,Q03CL06,Q0EM0E,P018L01C,P03M038,P06M06,M01F8CM03,M0E0D8M038,L03003N018,L0CQ01C,K03R01C,J0FES0C,J07T0E,J02T0E,J03T06,J018L0CL06,K0CK048L06,J01EK0407FF0406,J0C78K03800C786,I0303F01E01CI03206,I060CJF07J01A06,I0C303IF0CJ01C06,0018C003C33L0C06,00718J036003800C06,00E3K01C003C01C06,00C6K0181C3C01807,010CK0101E3C018038,0308K0101F1E03I0E,061N01F1E07I07,042O0F8E06I018,0C6L0100F801CJ0C,184L010078018J06,188L01003007K03,108M08J0EK018,318M0CI03CK01C,21N03I0FM0C,23O0IFEM06,22P0FCN06,26R08M03,64P01FEM03,64P01EN03,6CP01O036,4CP01O01F2,48P01O01D4,48P01CN017C,68P01IFL013,68Q0FFEL01E,68R078L01,68R06M03,68R06M01C,6BCL0FCI03N06,218L066I03N018,2180864606430418M018,2182664907C19B1CM038,3182679B06619B37J01803,118F6398066599338I03F07FE6,19DB630D066DDB31FI07FE6,0CR0707FCFE1FC,04R0600IF007C,06R0C00CFJ08,03Q0780082,01F8N0FF00106,003IFELF8I0FC,J07LF8,,:^FS";
    var categories = {}; // Initialize categories as an empty object
    var printQueue = [];
    var isPrinting = false;

    //Function pulls data from the menu.json and loads them into the categories variable.
    //This is done at the start of the program, along with displaying the categories.
    function loadCategories() {
        var fso = new ActiveXObject("Scripting.FileSystemObject");
        var filePath = "menu.json";
        if (fso.FileExists(filePath)) {
            var file = fso.OpenTextFile(filePath, 1, false);
            var fileContents = file.ReadAll();
            file.Close();
            categories = JSON.parse(fileContents);
            generateCategoryButtons();
        } else {
            alert("File not found: " + filePath);
        }
    }

    //Function clears the notification on screen. 
    //Used if a notification is called while a notification is on screen.
    function clearNotification() {
        if (notification) {
            document.body.removeChild(notification);
            notification = null;
        }
    }

    // Modified function to find an item in the category array
    //IE does not support .find()...
    //Returns the item object.
    function findItemInCategory(category, itemName) {
        var categoryArray = categories[category];
        for (var i = 0; i < categoryArray.length; i++) {
            if (categoryArray[i].name === itemName) {
                return categoryArray[i];
            }
        }
        return null; // Item not found
    }

	//Function is called when button is clicked.
	//Takes in the item, category, and options. Adds items to print queue.
	//Runs processPrintQueue.
    function buttonClicked(menuItem, category, options) {
        // Clear existing notification
        clearNotification();

        // Queue this item for printing
        var item = findItemInCategory(category, menuItem);
		
        printQueue.push({ category: category, item: item, options: options });
		processPrintQueue();
    }

   //Function prints the next item in queue. 
    function processPrintQueue() {
		if (isPrinting || printQueue.length === 0) {
			return;
		}

		isPrinting = true;						//Prevents printing until this cycle is done.

		var printItem = printQueue.shift();		//Queue in the stored object
		
		var category = printItem.category;		//Uses the Queue stored category
		var options = printItem.options;		//Uses the Queue stored options
		if(Array.isArray(options)){
			 // Sort options by length, longest to shortest
			options.sort(function(a, b) {
				return b.length - a.length;
			});
		}
		
		
		var item = printItem.item;				//Used to get index of item
		var chinese = item.chinese;
		var menuItem = item.name;
		
		// Get the Chinese graphics from the found item
		var chineseGraphics = item ? item.chinese : "";
		var optionsZPL = "";
		var coordinates = [
			[30, 120],   // First option coordinates
			[30, 160],   // Second option coordinates
			[210, 120],   // Third option coordinates
			[210, 160]    // Fourth option coordinates
		];

		if (options && options.length > 0) {
			for (var i = 0; i < options.length; i++) {
				if (i < coordinates.length) {
					optionsZPL += "^FO" + coordinates[i][0] + "," + coordinates[i][1] +
						"^A0, 20^FB400,3,0,L,0^FD- " + options[i] + "^FS";
				}
			}
		}

		var zplContent = "^XA" + pig_graphic + // Graphics for the logo
			"^CF0,30^FO0,10^FB400,3,0,C,0^FD" + menuItem + "^FS" + // Print menu item name 
			chineseGraphics + optionsZPL +
			"^XZ"; // End the ZPL file
		// Write ZPL content to a temporary file
		var filename = "print_" + Date.now() + ".zpl";
		writeZPLToFile(zplContent, filename);

		// Print ZPL file using the batch file
		printZPLFile(filename, menuItem);
		isPrinting = false;
		processPrintQueue();
	}

    function writeZPLToFile(zplContent, filename) {
        var fso = new ActiveXObject("Scripting.FileSystemObject");
        var file = fso.CreateTextFile(filename, true);
        file.Write(zplContent);
        file.Close();
    }

    function printZPLFile(filename, menuItem) {
        // Call the batch script to print the ZPL file
        var shell = new ActiveXObject("WScript.Shell");
        shell.Run("silentPrinter.lnk " + filename);

        // Show notification
        notification = document.createElement("div");
        notification.className = "notification";
        notification.innerHTML = "Printing " + menuItem;
        document.body.appendChild(notification);
        setTimeout(function () {
            clearNotification(); // Clear notification after 3 seconds
        }, 3000);
    }
	
	
	
//Functions for adding buttons

	//Parameter for header. Must pass the text you want displayed.
	function addHeader(header){
		var itemNameHeader = document.createElement("h2");
        itemNameHeader.className = "item-header"; // Add a class for styling
        itemNameHeader.innerHTML = header
        buttonContainer.appendChild(itemNameHeader);	
	}
	
	//Parameter for callback. Callback usually contains onButtonPress.
	function addPrintButton(callback) {
        var printButton = document.createElement("div");
        printButton.id = "printButton";
        printButton.className = "print-button";
        printButton.innerHTML = "Print";
        printButton.onclick = callback;
		var buttonContainer = document.getElementById("buttonContainer");
        buttonContainer.appendChild(printButton);
    }

	//Parameter for callback. Callback usually contains creating the categories/items.
    function addBackButton(callback) {
        var backButton = document.createElement("div");
        backButton.className = "rectangular-button";
        backButton.innerHTML = "Back <br> &#8592;";
        backButton.onclick = callback;
        var buttonContainer = document.getElementById("buttonContainer");
        buttonContainer.appendChild(backButton);
    }

    function generateCategoryButtons() {
        var buttonContainer = document.getElementById("buttonContainer");
        buttonContainer.innerHTML = ''; // Clear existing buttons
		
		var listRandom = ["Bruce Lee", "你知道紅豆冰沙很好喝嗎？", "你有吃過豆腐飯嗎？很好吃哦", 
						"鷄排飯粉絲", "高麗菜刈包", "滷蛋飯", "請踢我", "一半梅子·一半辣"];
		var randomGreeting = listRandom[Math.floor(Math.random() * listRandom.length)];
		addHeader(randomGreeting);
        
		Object.keys(categories).forEach(function (category) {
            var button = document.createElement("div");
            button.className = "rectangular-button";
            button.innerHTML = category;
            button.onclick = function () {
                generateItemButtons(category);
            };
            buttonContainer.appendChild(button);
        });
    }

    function generateItemButtons(category) {
        var buttonContainer = document.getElementById("buttonContainer");
        buttonContainer.innerHTML = ''; // Clear existing buttons
		addHeader(category);
        addBackButton(generateCategoryButtons);
        categories[category].forEach(function(item) {
            var button = document.createElement("div");
            button.className = "rectangular-button";
            button.innerHTML = item.name;
            button.onmousedown = function() {
                var held = false;
                var timer = setTimeout(function() {
                    held = true;
                    generateOptionButtons(item, category);
                }, 500); // Hold for 3 seconds to activate options
                button.onmouseup = function() {
                    clearTimeout(timer);
                    if (!held) {
                        buttonClicked(item.name, category);
                    }
                };
                button.onmouseleave = function() {
                    clearTimeout(timer);
                };
            };
            buttonContainer.appendChild(button);
        });
    }

    function generateOptionButtons(item, category) {
		var buttonContainer = document.getElementById("buttonContainer");
		buttonContainer.innerHTML = ''; // Clear existing buttons

		addHeader(item.name);											//Add header so user knows what item it is

		// Add back button
		addBackButton(function() { 
			generateItemButtons(category);
			item.selectedOptions = [];
		});

		// Add print button
		addPrintButton(function() { buttonClicked(item.name, category, item.selectedOptions); });

		// Create buttons for each option
		item.options.forEach(function(option) {
			var button = document.createElement("div");
			button.className = "rectangular-button";
			button.innerHTML = option; 									// Display only the option on the button

			button.onclick = function() {
				if (!item.selectedOptions) {
					item.selectedOptions = [];
				}

				var isOptionSelected = false;
				for (var i = 0; i < item.selectedOptions.length; i++) {
					if (item.selectedOptions[i] === option) {
						isOptionSelected = true;
						break;
					}
				}
				//Can't have more than 4 options selected
				var optionsLength = (item.selectedOptions.length+1 <= 4);
				
				if (!isOptionSelected && optionsLength) {
					item.selectedOptions.push(option);
					button.style.backgroundColor = "green";
				} else {
					item.selectedOptions = item.selectedOptions.filter(function(opt) {
						return opt !== option;
					});
					button.style.backgroundColor = "";
				}
			};

			buttonContainer.appendChild(button);
		});

	}



    window.onload = function () {
        loadCategories();
    };
</script>
<div id="buttonContainer"></div>
</body>
</html>
